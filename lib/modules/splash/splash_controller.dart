import 'package:get/get.dart';
import 'package:nexa_app/core/core_app/services/sync_service.dart';
import 'package:nexa_app/core/core_app/session/session_manager.dart';
import 'package:nexa_app/core/utils/logger/app_logger.dart';
import 'package:nexa_app/routes/routes.dart';

/// Controlador respons√°vel pelo gerenciamento da tela de splash.
///
/// Este controlador implementa a l√≥gica de inicializa√ß√£o da aplica√ß√£o,
/// incluindo verifica√ß√£o de sess√£o, carregamento de depend√™ncias e
/// redirecionamento para a tela apropriada baseada no estado de autentica√ß√£o.
///
/// ## Funcionalidades Principais:
///
/// 1. **Inicializa√ß√£o da Sess√£o**: Carrega e inicializa o SessionManager
/// 2. **Verifica√ß√£o de Autentica√ß√£o**: Verifica se usu√°rio est√° logado
/// 3. **Sincroniza√ß√£o de Dados**: Sincroniza dados quando usu√°rio est√° logado
/// 4. **Redirecionamento Inteligente**: Navega para tela apropriada
/// 5. **Feedback Visual**: Mostra progresso de sincroniza√ß√£o
/// 6. **Logging**: Rastreamento de opera√ß√µes de inicializa√ß√£o
/// 7. **Tratamento de Erros**: Gerenciamento de falhas durante inicializa√ß√£o
///
/// ## Arquitetura:
///
/// - **GetX Controller**: Gerenciamento de estado reativo
/// - **Dependency Injection**: Recebe SessionManager via GetX
/// - **Navigation**: Integra√ß√£o com sistema de rotas
/// - **Error Handling**: Tratamento de erros de inicializa√ß√£o
///
/// ## Fluxo de Funcionamento:
///
/// 1. Inicializa√ß√£o do controlador
/// 2. Carregamento do SessionManager
/// 3. Verifica√ß√£o de estado de autentica√ß√£o
/// 4. Se autenticado: Sincroniza√ß√£o de dados do servidor
/// 5. Redirecionamento para tela apropriada
/// 6. Logging de opera√ß√µes
///
/// ## Casos de Redirecionamento:
///
/// - **Usu√°rio Logado**: Sincroniza dados ‚Üí Redireciona para `/home`
/// - **Usu√°rio N√£o Logado**: Redireciona para `/login`
/// - **Ap√≥s Login**: Sincroniza dados ‚Üí Redireciona para `/home`
/// - **Erro na Inicializa√ß√£o**: Redireciona para `/login` (fallback)
///
/// ## Fluxo Completo da Aplica√ß√£o:
///
/// ```
/// [APP START] ‚Üí Splash
///     ‚Üì
///   Tem login?
///     ‚îú‚îÄ Sim ‚Üí Sincroniza ‚Üí Home
///     ‚îî‚îÄ N√£o ‚Üí Login
///                 ‚Üì
///            Login OK? ‚Üí Splash ‚Üí Sincroniza ‚Üí Home
/// ```
///
/// ## Uso:
///
/// ```dart
/// // O controlador √© inicializado automaticamente pelo SplashBinding
/// // quando a rota /splash √© navegada
/// ```
///
/// ## Depend√™ncias:
/// - `SessionManager`: Para verifica√ß√£o de autentica√ß√£o
/// - `AppLogger`: Para logging de opera√ß√µes
/// - `Routes`: Para navega√ß√£o entre telas
/// - `SyncService`: Para sincroniza√ß√£o de dados
class SplashController extends GetxController {
  /// Servi√ßo de sincroniza√ß√£o de dados.
  late final SyncService _syncService;

  /// Mensagem de status atual da splash.
  final RxString statusMessage = 'Carregando...'.obs;

  /// Indica se est√° sincronizando.
  final RxBool isSyncing = false.obs;

  /// Inicializa√ß√£o do controlador de splash.
  ///
  /// Executado quando o controlador √© criado, implementando toda a l√≥gica
  /// de inicializa√ß√£o da aplica√ß√£o e redirecionamento para a tela apropriada.
  ///
  /// ## Comportamento:
  /// 1. Registra in√≠cio da inicializa√ß√£o
  /// 2. Carrega e inicializa SessionManager
  /// 3. Verifica estado de autentica√ß√£o
  /// 4. Redireciona para tela apropriada
  /// 5. Registra resultado da opera√ß√£o
  ///
  /// ## Tratamento de Erros:
  /// - Falhas na inicializa√ß√£o do SessionManager
  /// - Problemas de navega√ß√£o
  /// - Timeouts de inicializa√ß√£o
  ///
  /// ## Redirecionamentos:
  /// - Usu√°rio logado ‚Üí `/home`
  /// - Usu√°rio n√£o logado ‚Üí `/login`
  /// - Erro ‚Üí `/login` (fallback)
  @override
  void onInit() {
    super.onInit();

    /// Obt√©m inst√¢ncia do SyncService via GetX.
    _syncService = Get.find<SyncService>();

    /// Registra in√≠cio da inicializa√ß√£o do splash.
    AppLogger.i('üåÄ Splash: Iniciando processo de inicializa√ß√£o',
        tag: 'SplashController');

    /// Executa processo de inicializa√ß√£o de forma ass√≠ncrona.
    _initializeApp();
  }

  /// Inicializa a aplica√ß√£o de forma ass√≠ncrona.
  ///
  /// Carrega depend√™ncias, verifica autentica√ß√£o e redireciona
  /// para a tela apropriada baseada no estado do usu√°rio.
  Future<void> _initializeApp() async {
    try {
      /// Obt√©m inst√¢ncia do SessionManager.
      final session = Get.find<SessionManager>();

      /// Registra in√≠cio da inicializa√ß√£o da sess√£o.
      AppLogger.d('üåÄ Inicializando SessionManager...',
          tag: 'SplashController');

      /// Inicializa o SessionManager (carrega dados do usu√°rio).
      await session.init();

      /// Registra estado da sess√£o ap√≥s inicializa√ß√£o.
      AppLogger.d(
          'üåÄ SessionManager inicializado. Usu√°rio: ${session.usuario?.nome ?? 'Nenhum'}',
          tag: 'SplashController');

      /// Verifica se usu√°rio est√° autenticado.
      if (session.estaLogado) {
        /// Usu√°rio est√° logado, executa sincroniza√ß√£o antes de ir para home.
        AppLogger.i('‚úÖ Usu√°rio autenticado. Iniciando sincroniza√ß√£o...',
            tag: 'SplashController');

        /// Atualiza mensagem de status.
        statusMessage.value = 'Sincronizando dados...';
        isSyncing.value = true;

        /// Executa sincroniza√ß√£o de dados.
        final sincronizadoComSucesso = await _syncService.sincronizar();

        isSyncing.value = false;

        if (sincronizadoComSucesso) {
          AppLogger.i('‚úÖ Sincroniza√ß√£o conclu√≠da. Redirecionando para home.',
              tag: 'SplashController');
          statusMessage.value = 'Sincroniza√ß√£o conclu√≠da!';
        } else {
          AppLogger.w('‚ö†Ô∏è Sincroniza√ß√£o falhou. Continuando para home.',
              tag: 'SplashController');
          statusMessage.value = 'Continuando...';
        }

        /// Pequeno delay para mostrar mensagem de conclus√£o.
        await Future.delayed(const Duration(milliseconds: 500));

        await Get.offAllNamed(Routes.home);
      } else {
        /// Usu√°rio n√£o est√° logado, redireciona para login.
        AppLogger.w('üîê Usu√°rio n√£o autenticado. Redirecionando para login.',
            tag: 'SplashController');
        statusMessage.value = 'Redirecionando...';
        await Get.offAllNamed(Routes.login);
      }
    } catch (e, stack) {
      /// Trata erro durante inicializa√ß√£o.
      AppLogger.e('‚ùå Erro durante inicializa√ß√£o do splash',
          tag: 'SplashController', error: e, stackTrace: stack);

      /// Em caso de erro, redireciona para login como fallback.
      AppLogger.w('üîÑ Redirecionando para login devido a erro.',
          tag: 'SplashController');
      await Get.offAllNamed(Routes.login);
    }
  }
}
