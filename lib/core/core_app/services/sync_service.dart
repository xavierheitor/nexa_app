import 'package:nexa_app/data/repositories/checklist_modelo_repo.dart';
import 'package:nexa_app/data/repositories/checklist_opcao_resposta_relacao_repo.dart';
import 'package:nexa_app/data/repositories/checklist_opcao_resposta_repo.dart';
import 'package:nexa_app/data/repositories/checklist_pergunta_relacao_repo.dart';
import 'package:nexa_app/data/repositories/checklist_pergunta_repo.dart';
import 'package:nexa_app/data/repositories/eletricista_repo.dart';
import 'package:nexa_app/data/repositories/equipe_repo.dart';
import 'package:nexa_app/data/repositories/checklist_tipo_equipe_relacao_repo.dart';
import 'package:nexa_app/data/repositories/checklist_tipo_veiculo_relacao_repo.dart';
import 'package:nexa_app/data/repositories/tipo_equipe_repo.dart';
import 'package:nexa_app/core/sync/sync_manager.dart';
import 'package:nexa_app/data/repositories/veiculo_repo.dart';
import 'package:nexa_app/data/repositories/tipo_veiculo_repo.dart';
import 'package:nexa_app/core/utils/logger/app_logger.dart';
import 'package:get/get.dart';

/// Servi√ßo respons√°vel pela sincroniza√ß√£o de dados entre servidor e app local.
///
/// Este servi√ßo gerencia a sincroniza√ß√£o bidirecional de dados, garantindo
/// que o aplicativo local esteja sempre atualizado com os dados do servidor
/// e vice-versa. √â executado ap√≥s autentica√ß√£o bem-sucedida ou sob demanda.
///
/// ## Funcionalidades Principais:
///
/// 1. **Sincroniza√ß√£o Inicial**: Baixa dados essenciais ap√≥s login
/// 2. **Sincroniza√ß√£o Incremental**: Atualiza apenas dados modificados
/// 3. **Upload de Dados**: Envia dados locais pendentes para servidor
/// 4. **Tratamento de Conflitos**: Resolve conflitos de sincroniza√ß√£o
/// 5. **Progresso**: Notifica progresso da sincroniza√ß√£o
/// 6. **Retry Logic**: Tenta novamente em caso de falha
///
/// ## Arquitetura:
///
/// - **Servi√ßo Independente**: N√£o depende de UI
/// - **Ass√≠ncrono**: Todas opera√ß√µes s√£o n√£o-bloqueantes
/// - **Observ√°vel**: Permite acompanhamento de progresso
/// - **Robusto**: Tratamento completo de erros
/// - **Modular**: Usa SyncManager para coordenar reposit√≥rios
///
/// ## Fluxo de Sincroniza√ß√£o:
///
/// 1. Verifica conectividade
/// 2. Obt√©m timestamp da √∫ltima sincroniza√ß√£o
/// 3. Baixa dados modificados do servidor via SyncManager
/// 4. Atualiza banco local via reposit√≥rios registrados
/// 5. Envia dados pendentes para servidor
/// 6. Atualiza timestamp de sincroniza√ß√£o
/// 7. Notifica conclus√£o
///
/// ## Uso:
///
/// ```dart
/// final syncService = SyncService();
/// await syncService.sincronizar();
/// ```
class SyncService {
  /// Gerenciador central de sincroniza√ß√£o.
  ///
  /// Respons√°vel por coordenar a sincroniza√ß√£o de todos os reposit√≥rios
  /// registrados, oferecendo m√©todos para sincroniza√ß√£o completa ou seletiva.
  late final SyncManager _syncManager;

  /// Indica se sincroniza√ß√£o est√° em andamento.
  bool _isSyncing = false;

  /// Getter para verificar se est√° sincronizando.
  bool get isSyncing => _isSyncing;

  /// Construtor do servi√ßo de sincroniza√ß√£o.
  ///
  /// Inicializa o SyncManager e registra os reposit√≥rios sincroniz√°veis.
  /// Este √© o local centralizado onde todos os reposit√≥rios devem ser
  /// registrados para participar do processo de sincroniza√ß√£o.
  ///
  /// ## Reposit√≥rios Registrados:
  ///
  /// Atualmente nenhum reposit√≥rio est√° registrado. Para adicionar novos
  /// reposit√≥rios sincroniz√°veis, implemente a interface `SyncableRepository<T>`
  /// e registre aqui no construtor.
  ///
  /// ## Exemplo de Registro:
  ///
  /// ```dart
  /// SyncService() {
  ///   _syncManager = SyncManager();
  ///
  ///   // Registrar reposit√≥rios sincroniz√°veis
  ///   _syncManager.registrar(UsuarioSyncRepo(dio: dio, dao: usuarioDao));
  ///   _syncManager.registrar(ProdutoSyncRepo(dio: dio, dao: produtoDao));
  ///   _syncManager.registrar(CategoriaSyncRepo(dio: dio, dao: categoriaDao));
  /// }
  /// ```
  ///
  /// ## Onde Implementar Reposit√≥rios:
  ///
  /// Crie os reposit√≥rios sincroniz√°veis em:
  /// - `lib/core/domain/repositories/sync/` (recomendado)
  /// - `lib/core/sync/repositories/` (alternativa)
  ///
  /// ## Estrutura Recomendada:
  ///
  /// ```
  /// lib/core/domain/repositories/sync/
  /// ‚îú‚îÄ‚îÄ usuario_sync_repo.dart
  /// ‚îú‚îÄ‚îÄ produto_sync_repo.dart
  /// ‚îú‚îÄ‚îÄ categoria_sync_repo.dart
  /// ‚îî‚îÄ‚îÄ ...
  /// ```
  SyncService() {
    _syncManager = SyncManager();

    // Registrar reposit√≥rios sincroniz√°veis
    _syncManager.registrar(VeiculoRepo(dio: Get.find(), db: Get.find()));
    _syncManager.registrar(TipoVeiculoRepo(dio: Get.find(), db: Get.find()));
    _syncManager.registrar(TipoEquipeRepo(dio: Get.find(), db: Get.find()));
    _syncManager.registrar(EquipeRepo(dio: Get.find(), db: Get.find()));
    _syncManager.registrar(EletricistaRepo(dio: Get.find(), db: Get.find()));
    _syncManager
        .registrar(ChecklistModeloRepo(dio: Get.find(), db: Get.find()));
    _syncManager
        .registrar(ChecklistPerguntaRepo(dio: Get.find(), db: Get.find()));
    _syncManager
        .registrar(ChecklistOpcaoRespostaRepo(dio: Get.find(), db: Get.find()));
    _syncManager.registrar(
        ChecklistOpcaoRespostaRelacaoRepo(dio: Get.find(), db: Get.find()));
    _syncManager.registrar(
        ChecklistPerguntaRelacaoRepo(dio: Get.find(), db: Get.find()));
    _syncManager.registrar(
        ChecklistTipoEquipeRelacaoRepo(dio: Get.find(), db: Get.find()));
    _syncManager.registrar(
        ChecklistTipoVeiculoRelacaoRepo(dio: Get.find(), db: Get.find()));

    AppLogger.i(
        'SyncService inicializado com ${_syncManager.modulosDisponiveis.length} m√≥dulos: ${_syncManager.modulosDisponiveis}',
        tag: 'SyncService');
  }

  /// Executa sincroniza√ß√£o completa de dados.
  ///
  /// Sincroniza todos os dados necess√°rios entre servidor e app local,
  /// garantindo que o usu√°rio tenha acesso √†s informa√ß√µes mais recentes.
  /// Utiliza o SyncManager para coordenar a sincroniza√ß√£o de todos os
  /// reposit√≥rios registrados.
  ///
  /// ## Comportamento:
  /// 1. Verifica se j√° est√° sincronizando (evita duplica√ß√£o)
  /// 2. Inicia processo de sincroniza√ß√£o via SyncManager
  /// 3. Sincroniza todos os m√≥dulos registrados
  /// 4. Notifica progresso e conclus√£o
  /// 5. Trata erros adequadamente
  ///
  /// ## Retorno:
  /// - `Future<bool>`: true se sincroniza√ß√£o foi bem-sucedida, false caso contr√°rio
  ///
  /// ## Exce√ß√µes:
  /// Captura e trata todas exce√ß√µes internamente, retornando false em caso de erro.
  Future<bool> sincronizar() async {
    /// Evita sincroniza√ß√£o concorrente.
    if (_isSyncing) {
      AppLogger.w('Sincroniza√ß√£o j√° em andamento', tag: 'SyncService');
      return false;
    }

    _isSyncing = true;
    AppLogger.i('üîÑ Iniciando sincroniza√ß√£o de dados', tag: 'SyncService');

    try {
      /// Executa sincroniza√ß√£o completa via SyncManager.
      /// O SyncManager coordena todos os reposit√≥rios registrados.
      final resultado = await _syncManager.sincronizarTudo();

      if (resultado.sucesso) {
        AppLogger.i('‚úÖ Sincroniza√ß√£o conclu√≠da com sucesso',
            tag: 'SyncService');
        return true;
      } else if (resultado.podeContinuar) {
        AppLogger.w('‚ö†Ô∏è Sincroniza√ß√£o parcial - usando dados locais',
            tag: 'SyncService');
        return true; // Pode continuar com dados locais
      } else {
        AppLogger.e('‚ùå Falha cr√≠tica na sincroniza√ß√£o', tag: 'SyncService');
        return false;
      }
    } catch (e, stackTrace) {
      /// Trata erro de sincroniza√ß√£o.
      AppLogger.e('‚ùå Erro durante sincroniza√ß√£o',
          tag: 'SyncService', error: e, stackTrace: stackTrace);
      return false;
    } finally {
      _isSyncing = false;
    }
  }

  /// Executa sincroniza√ß√£o r√°pida (apenas dados essenciais).
  ///
  /// Sincroniza apenas os dados mais cr√≠ticos e essenciais,
  /// √∫til para atualiza√ß√µes r√°pidas sem bloquear o usu√°rio.
  /// Atualmente executa a mesma sincroniza√ß√£o completa, mas pode ser
  /// customizada para sincronizar apenas m√≥dulos espec√≠ficos.
  ///
  /// ## Retorno:
  /// - `Future<bool>`: true se sincroniza√ß√£o foi bem-sucedida, false caso contr√°rio
  Future<bool> sincronizarRapida() async {
    if (_isSyncing) {
      AppLogger.w('Sincroniza√ß√£o j√° em andamento', tag: 'SyncService');
      return false;
    }

    _isSyncing = true;
    AppLogger.i('‚ö° Iniciando sincroniza√ß√£o r√°pida', tag: 'SyncService');

    try {
      /// Executa sincroniza√ß√£o completa (pode ser customizada para m√≥dulos espec√≠ficos).
      /// TODO: Implementar sincroniza√ß√£o seletiva de m√≥dulos essenciais
      final resultado = await _syncManager.sincronizarTudo();

      if (resultado.sucesso) {
        AppLogger.i('‚úÖ Sincroniza√ß√£o r√°pida conclu√≠da', tag: 'SyncService');
        return true;
      } else if (resultado.podeContinuar) {
        AppLogger.w('‚ö†Ô∏è Sincroniza√ß√£o r√°pida parcial', tag: 'SyncService');
        return true;
      } else {
        AppLogger.e('‚ùå Falha na sincroniza√ß√£o r√°pida', tag: 'SyncService');
        return false;
      }
    } catch (e, stackTrace) {
      AppLogger.e('‚ùå Erro durante sincroniza√ß√£o r√°pida',
          tag: 'SyncService', error: e, stackTrace: stackTrace);
      return false;
    } finally {
      _isSyncing = false;
    }
  }

  /// Sincroniza um m√≥dulo espec√≠fico.
  ///
  /// Executa sincroniza√ß√£o apenas do m√≥dulo especificado, √∫til para
  /// atualiza√ß√µes pontuais ou corre√ß√µes de dados espec√≠ficos.
  ///
  /// ## Par√¢metros:
  /// - `nomeModulo`: Nome do m√≥dulo a ser sincronizado
  /// - `force`: Se true, for√ßa sincroniza√ß√£o mesmo com dados locais existentes
  ///
  /// ## Retorno:
  /// - `Future<bool>`: true se sincroniza√ß√£o foi bem-sucedida, false caso contr√°rio
  ///
  /// ## Exemplo:
  /// ```dart
  /// // Sincronizar apenas usu√°rios
  /// await syncService.sincronizarModulo('usuario');
  ///
  /// // For√ßar sincroniza√ß√£o de produtos
  /// await syncService.sincronizarModulo('produto', force: true);
  /// ```
  Future<bool> sincronizarModulo(String nomeModulo,
      {bool force = false}) async {
    if (_isSyncing) {
      AppLogger.w('Sincroniza√ß√£o j√° em andamento', tag: 'SyncService');
      return false;
    }

    _isSyncing = true;
    AppLogger.i('üîÑ Sincronizando m√≥dulo: $nomeModulo', tag: 'SyncService');

    try {
      await _syncManager.sincronizarModulo(nomeModulo, force: force);
      AppLogger.i('‚úÖ M√≥dulo $nomeModulo sincronizado com sucesso',
          tag: 'SyncService');
      return true;
    } catch (e, stackTrace) {
      AppLogger.e('‚ùå Erro ao sincronizar m√≥dulo $nomeModulo',
          tag: 'SyncService', error: e, stackTrace: stackTrace);
      return false;
    } finally {
      _isSyncing = false;
    }
  }

  /// Lista os m√≥dulos dispon√≠veis para sincroniza√ß√£o.
  ///
  /// Retorna uma lista com todos os nomes de m√≥dulos que possuem
  /// reposit√≥rios registrados no SyncManager.
  ///
  /// ## Retorno:
  /// - `List<String>`: Lista de nomes de m√≥dulos dispon√≠veis
  ///
  /// ## Exemplo:
  /// ```dart
  /// final modulos = syncService.modulosDisponiveis;
  /// print('M√≥dulos: $modulos'); // ['usuario', 'produto', 'categoria']
  /// ```
  List<String> get modulosDisponiveis => _syncManager.modulosDisponiveis;

  /// Executa sincroniza√ß√£o completa de todas as tabelas.
  ///
  /// M√©todo p√∫blico que chama sincronizarTudo do SyncManager,
  /// sincronizando todos os reposit√≥rios registrados.
  ///
  /// ## Retorno:
  /// - `Future<bool>`: true se sincroniza√ß√£o foi bem-sucedida, false caso contr√°rio
  Future<bool> sincronizarTudo() async {
    if (_isSyncing) {
      AppLogger.w('Sincroniza√ß√£o j√° em andamento', tag: 'SyncService');
      return false;
    }

    _isSyncing = true;
    AppLogger.i('üîÑ Iniciando sincroniza√ß√£o completa (FOR√áADA)',
        tag: 'SyncService');
    AppLogger.v('üìã M√≥dulos dispon√≠veis: ${_syncManager.modulosDisponiveis}',
        tag: 'SyncService');
    AppLogger.v('‚ö° Modo FOR√áADO: ignorando dados locais existentes',
        tag: 'SyncService');

    try {
      final resultado = await _syncManager.sincronizarTudo(force: true);

      if (resultado.sucesso) {
        AppLogger.i('‚úÖ Sincroniza√ß√£o completa conclu√≠da com sucesso',
            tag: 'SyncService');
        AppLogger.v(
            'üìä Resultado: sucesso=true, podeContinuar=${resultado.podeContinuar}',
            tag: 'SyncService');
        return true;
      } else if (resultado.podeContinuar) {
        AppLogger.w(
            '‚ö†Ô∏è Sincroniza√ß√£o parcial - alguns m√≥dulos falharam mas pode continuar',
            tag: 'SyncService');
        AppLogger.v(
            'üìä Resultado: sucesso=false, podeContinuar=${resultado.podeContinuar}',
            tag: 'SyncService');
        return true;
      } else {
        AppLogger.e('‚ùå Falha cr√≠tica na sincroniza√ß√£o completa',
            tag: 'SyncService');
        AppLogger.v(
            'üìä Resultado: sucesso=false, podeContinuar=${resultado.podeContinuar}',
            tag: 'SyncService');
        return false;
      }
    } catch (e, stackTrace) {
      AppLogger.e('‚ùå Erro inesperado durante sincroniza√ß√£o completa',
          tag: 'SyncService', error: e, stackTrace: stackTrace);
      return false;
    } finally {
      _isSyncing = false;
      AppLogger.v('üèÅ Sincroniza√ß√£o finalizada (isSyncing=false)',
          tag: 'SyncService');
    }
  }

  /// Cancela sincroniza√ß√£o em andamento.
  void cancelar() {
    if (_isSyncing) {
      AppLogger.w('üö´ Cancelando sincroniza√ß√£o', tag: 'SyncService');
      _isSyncing = false;
    }
  }
}
