import 'package:dio/dio.dart';
import 'package:nexa_app/core/utils/logger/app_logger.dart';

/// Interceptor respons√°vel por tratamento padronizado de erros HTTP.
///
/// Este interceptor transforma erros gen√©ricos do Dio em mensagens
/// mais amig√°veis e compreens√≠veis para o usu√°rio final.
///
/// ## Tipos de Erro Tratados:
/// 1. **Timeout**: Conex√£o, envio ou recebimento
/// 2. **Connection Error**: Sem internet ou servidor inacess√≠vel
/// 3. **Bad Response**: Respostas com c√≥digos de erro (4xx, 5xx)
/// 4. **Cancel**: Requisi√ß√£o cancelada pelo usu√°rio
/// 5. **Bad Certificate**: Problemas com SSL/TLS
/// 6. **Unknown**: Erros inesperados
///
/// ## Nota sobre 401:
/// Erros 401 (Unauthorized) s√£o tratados pelo AuthInterceptor
/// e n√£o s√£o modificados aqui para n√£o interferir no fluxo de refresh.
class ErrorHandlerInterceptor extends Interceptor {
  @override
  void onError(DioException err, ErrorInterceptorHandler handler) {
    // Ignora 401 - ser√° tratado pelo AuthInterceptor
    if (err.response?.statusCode == 401) {
      return handler.next(err);
    }

    // Traduz tipo de erro para mensagem amig√°vel
    final mensagem = _getErrorMessage(err);

    AppLogger.e(
      'üîª Erro tratado: $mensagem',
      tag: 'ErrorHandler',
    );

    // Rejeita com mensagem traduzida
    handler.reject(
      DioException(
        requestOptions: err.requestOptions,
        error: mensagem,
        type: err.type,
        response: err.response,
      ),
    );
  }

  // ==========================================================================
  // M√âTODOS AUXILIARES
  // ==========================================================================

  /// Traduz DioExceptionType em mensagem amig√°vel.
  String _getErrorMessage(DioException err) {
    final status = err.response?.statusCode ?? 0;
    final tipo = err.type;

    switch (tipo) {
      case DioExceptionType.connectionTimeout:
        return 'Tempo de conex√£o esgotado. Verifique sua internet.';

      case DioExceptionType.sendTimeout:
        return 'Tempo esgotado ao enviar dados. Tente novamente.';

      case DioExceptionType.receiveTimeout:
        return 'Tempo esgotado ao receber dados. Tente novamente.';

      case DioExceptionType.connectionError:
        return 'Falha de conex√£o. Verifique sua internet.';

      case DioExceptionType.badResponse:
        return _getBadResponseMessage(status, err.response?.data);

      case DioExceptionType.cancel:
        return 'Requisi√ß√£o cancelada.';

      case DioExceptionType.badCertificate:
        return 'Certificado SSL inv√°lido. Verifique a seguran√ßa da conex√£o.';

      case DioExceptionType.unknown:
        return _getUnknownErrorMessage(err);
    }
  }

  /// Retorna mensagem espec√≠fica para erros de resposta (4xx, 5xx).
  String _getBadResponseMessage(int status, dynamic responseData) {
    // Tenta extrair mensagem do backend
    if (responseData is Map && responseData.containsKey('message')) {
      return responseData['message'].toString();
    }

    if (responseData is Map && responseData.containsKey('error')) {
      return responseData['error'].toString();
    }

    // Mensagens padr√£o por status code
    switch (status) {
      case 400:
        return 'Requisi√ß√£o inv√°lida. Verifique os dados enviados.';
      case 403:
        return 'Acesso negado. Voc√™ n√£o tem permiss√£o para esta a√ß√£o.';
      case 404:
        return 'Recurso n√£o encontrado.';
      case 422:
        return 'Dados inv√°lidos. Verifique as informa√ß√µes.';
      case 429:
        return 'Muitas requisi√ß√µes. Aguarde um momento e tente novamente.';
      case 500:
        return 'Erro interno no servidor. Tente novamente mais tarde.';
      case 502:
        return 'Servidor temporariamente indispon√≠vel.';
      case 503:
        return 'Servi√ßo em manuten√ß√£o. Tente novamente em alguns minutos.';
      default:
        return 'Erro no servidor (status $status).';
    }
  }

  /// Retorna mensagem para erros desconhecidos.
  String _getUnknownErrorMessage(DioException err) {
    // Se tiver mensagem de erro original, usa ela
    if (err.message != null && err.message!.isNotEmpty) {
      return 'Erro de conex√£o: ${err.message}';
    }

    return 'Erro desconhecido. Verifique sua conex√£o e tente novamente.';
  }
}

