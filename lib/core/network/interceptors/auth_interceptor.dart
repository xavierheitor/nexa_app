import 'dart:async';

import 'package:dio/dio.dart';
import 'package:get/get.dart' as g;
import 'package:nexa_app/core/constants/api_constants.dart';
import 'package:nexa_app/core/security/session_manager.dart';
import 'package:nexa_app/core/utils/logger/app_logger.dart';

/// Interceptor respons√°vel por autentica√ß√£o e refresh autom√°tico de tokens.
///
/// Este interceptor gerencia todo o fluxo de autentica√ß√£o das requisi√ß√µes HTTP:
///
/// ## Funcionalidades:
/// 1. **Anexa√ß√£o Autom√°tica de Token**: Adiciona Bearer token em todas as requisi√ß√µes
/// 2. **Refresh Autom√°tico**: Renova token expirado quando recebe erro 401
/// 3. **Controle de Concorr√™ncia**: Evita m√∫ltiplas tentativas simult√¢neas de refresh
/// 4. **Retry Inteligente**: Reexecuta requisi√ß√µes ap√≥s refresh bem-sucedido
/// 5. **Logout Autom√°tico**: Redireciona para login ap√≥s falha de refresh
///
/// ## Fluxo de Autentica√ß√£o:
/// ```
/// Request ‚Üí Adiciona Token ‚Üí Envia
///    ‚Üì
/// 401 Unauthorized?
///    ‚Üì Sim
/// J√° refreshing?
///    ‚Üì N√£o
/// Refresh Token ‚Üí Sucesso? ‚Üí Retry Request
///    ‚Üì N√£o
/// Logout ‚Üí Redirect Login
/// ```
class AuthInterceptor extends Interceptor {
  // ==========================================================================
  // DEPEND√äNCIAS
  // ==========================================================================

  /// Inst√¢ncia do Dio usada para retry de requisi√ß√µes.
  final Dio _dio;

  /// Construtor que recebe a inst√¢ncia do Dio.
  AuthInterceptor(this._dio);

  // ==========================================================================
  // ESTADO DE CONTROLE DE REFRESH
  // ==========================================================================

  /// Flag que indica se uma opera√ß√£o de refresh est√° em andamento.
  bool _isRefreshing = false;

  /// Completer usado para sincronizar m√∫ltiplas requisi√ß√µes durante refresh.
  Completer<void>? _refreshCompleter;

  // ==========================================================================
  // INTERCEPTOR DE REQUEST
  // ==========================================================================

  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    try {
      // Obt√©m SessionManager e token
      final sessionManager = g.Get.find<SessionManager>();
      
      // NOTA: Usamos tokenSync aqui pois interceptors precisam de acesso s√≠ncrono.
      // O token √© mantido em cache em mem√≥ria ap√≥s ser carregado do SecureStorage.
      // ignore: deprecated_member_use_from_same_package
      final token = sessionManager.tokenSync;

      // Anexa token ao header se dispon√≠vel
      if (token != null && token.isNotEmpty) {
        options.headers['Authorization'] = 'Bearer $token';
        AppLogger.d('üîê Token adicionado ao header', tag: 'AuthInterceptor');
      }
    } catch (e) {
      AppLogger.w('‚ö†Ô∏è Erro ao adicionar token: $e', tag: 'AuthInterceptor');
    }

    handler.next(options);
  }

  // ==========================================================================
  // INTERCEPTOR DE ERROR - REFRESH DE TOKEN
  // ==========================================================================

  @override
  void onError(DioException err, ErrorInterceptorHandler handler) async {
    final status = err.response?.statusCode;

    // Apenas processa erros 401 (Unauthorized)
    if (status != 401) {
      return handler.next(err);
    }

    try {
      final sessionManager = g.Get.find<SessionManager>();
      final refreshToken = sessionManager.usuario?.refreshToken;
      final options = err.requestOptions;

      // Recupera n√∫mero de tentativas de refresh
      final int retryCount = (options.extra['refreshAttempts'] ?? 0) as int;

      // Verifica limite de tentativas
      if (retryCount >= ApiConstants.maxRefreshAttempts) {
        AppLogger.e(
          '‚ùå M√°ximo de tentativas de refresh atingido',
          tag: 'AuthInterceptor',
        );
        await _performLogout(sessionManager);
        return handler.next(err);
      }

      // Verifica se h√° refresh token dispon√≠vel
      if (refreshToken == null || refreshToken.isEmpty) {
        AppLogger.w(
          'üö´ Refresh token ausente. Deixando erro 401 passar.',
          tag: 'AuthInterceptor',
        );
        return handler.next(err);
      }

      // Se j√° est√° refreshing, aguarda conclus√£o
      if (_isRefreshing) {
        final newToken = await _waitForRefresh(sessionManager);
        if (newToken != null) {
          final retryResponse = await _retryRequest(options, newToken, retryCount);
          return handler.resolve(retryResponse);
        }
        return handler.next(err);
      }

      // Inicia processo de refresh
      AppLogger.w(
        'üîÅ Tentando renovar token... (tentativa ${retryCount + 1})',
        tag: 'AuthInterceptor',
      );

      final newToken = await _performRefresh(sessionManager, refreshToken);

      if (newToken != null) {
        final retryResponse = await _retryRequest(options, newToken, retryCount);
        return handler.resolve(retryResponse);
      }

      // Se refresh falhou, faz logout
      await _performLogout(sessionManager);
      return handler.next(err);
    } catch (e, s) {
      AppLogger.e(
        '‚ùå Erro no interceptor de autentica√ß√£o',
        tag: 'AuthInterceptor',
        error: e,
        stackTrace: s,
      );
      return handler.next(err);
    }
  }

  // ==========================================================================
  // M√âTODOS AUXILIARES
  // ==========================================================================

  /// Aguarda a conclus√£o de um refresh em andamento.
  Future<String?> _waitForRefresh(SessionManager sessionManager) async {
    AppLogger.d('üîÑ Aguardando outra renova√ß√£o de token', tag: 'AuthInterceptor');

    try {
      await _refreshCompleter?.future.timeout(const Duration(seconds: 5));
      
      // NOTA: Usa tokenSync para acesso s√≠ncrono ap√≥s refresh
      // ignore: deprecated_member_use_from_same_package
      final newToken = sessionManager.tokenSync;

      if (newToken != null && newToken.isNotEmpty) {
        return newToken;
      }
    } catch (e) {
      AppLogger.w('‚è±Ô∏è Timeout aguardando refresh', tag: 'AuthInterceptor');
    }

    return null;
  }

  /// Executa o processo de refresh do token.
  Future<String?> _performRefresh(
    SessionManager sessionManager,
    String refreshToken,
  ) async {
    _isRefreshing = true;
    _refreshCompleter = Completer();

    try {
      // Executa refresh com timeout
      await sessionManager.authService
          .refreshToken(refreshToken)
          .timeout(const Duration(seconds: 5));

      // Marca como conclu√≠do
      _refreshCompleter?.complete();
      _isRefreshing = false;

      // Retorna o novo token
      // NOTA: Usa tokenSync para acesso s√≠ncrono ap√≥s refresh
      // ignore: deprecated_member_use_from_same_package
      final newToken = sessionManager.tokenSync;
      if (newToken != null && newToken.isNotEmpty) {
        AppLogger.i('‚úÖ Token renovado com sucesso', tag: 'AuthInterceptor');
        return newToken;
      }
    } catch (e, s) {
      // Completa com erro
      if (!(_refreshCompleter?.isCompleted ?? true)) {
        _refreshCompleter?.completeError(e, s);
      }
      _isRefreshing = false;

      AppLogger.e(
        'üö´ Falha ao renovar token',
        tag: 'AuthInterceptor',
        error: e,
        stackTrace: s,
      );
    }

    return null;
  }

  /// Reexecuta a requisi√ß√£o original com o novo token.
  Future<Response<dynamic>> _retryRequest(
    RequestOptions options,
    String token,
    int currentRetryCount,
  ) async {
    // Atualiza o token e incrementa contador de tentativas
    options.headers['Authorization'] = 'Bearer $token';
    options.extra['refreshAttempts'] = currentRetryCount + 1;

    AppLogger.d('üîÅ Retentando requisi√ß√£o ap√≥s refresh', tag: 'AuthInterceptor');

    // Reexecuta a requisi√ß√£o usando a inst√¢ncia do Dio injetada
    return await _dio.fetch(options);
  }

  /// Executa logout e redireciona para tela de login.
  Future<void> _performLogout(SessionManager sessionManager) async {
    AppLogger.w('üëã For√ßando logout devido a falha de autentica√ß√£o', tag: 'AuthInterceptor');

    try {
      await sessionManager.logout();
      await g.Get.offAllNamed('/login');
    } catch (e) {
      AppLogger.e('‚ùå Erro ao fazer logout', tag: 'AuthInterceptor', error: e);
    }
  }
}

