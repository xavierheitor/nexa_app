import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:path_provider/path_provider.dart';

/// Sistema de logging centralizado para toda a aplica√ß√£o NexaApp.
///
/// Esta classe implementa um sistema robusto de logging que combina
/// sa√≠da colorida no console para desenvolvimento com persist√™ncia
/// em arquivo para produ√ß√£o e debugging. Oferece diferentes n√≠veis
/// de log e formata√ß√£o padronizada para facilitar o debugging e
/// monitoramento da aplica√ß√£o.
///
/// ## Funcionalidades Principais:
///
/// 1. **Logging Colorido**: Sa√≠da colorida no console para desenvolvimento
/// 2. **Persist√™ncia em Arquivo**: Logs salvos em `app.log` no diret√≥rio de documentos
/// 3. **N√≠veis de Log**: 5 n√≠veis diferentes (verbose, debug, info, warning, error)
/// 4. **Formata√ß√£o Padronizada**: Timestamp, tags e emojis para identifica√ß√£o r√°pida
/// 5. **Tratamento de Erros**: Captura de exce√ß√µes e stack traces
/// 6. **Performance**: Opera√ß√µes ass√≠ncronas para n√£o bloquear a UI
/// 7. **Modo Debug**: Logs apenas em modo debug para otimiza√ß√£o de produ√ß√£o
///
/// ## Arquitetura:
///
/// - **Singleton Pattern**: M√©todos est√°ticos para acesso global
/// - **Async File I/O**: Escrita de arquivos n√£o bloqueia a aplica√ß√£o
/// - **Conditional Logging**: Logs apenas em modo debug
/// - **Color Coding**: C√≥digos ANSI para cores no terminal
/// - **Error Handling**: Tratamento seguro de falhas na escrita de arquivos
///
/// ## N√≠veis de Log:
///
/// - **VERBOSE (üîç)**: Informa√ß√µes muito detalhadas para debugging profundo
/// - **DEBUG (üêû)**: Informa√ß√µes de debugging para desenvolvimento
/// - **INFO (‚ÑπÔ∏è)**: Informa√ß√µes gerais sobre o funcionamento da aplica√ß√£o
/// - **WARNING (‚ö†Ô∏è)**: Avisos sobre situa√ß√µes que podem causar problemas
/// - **ERROR (‚ùå)**: Erros que afetam o funcionamento da aplica√ß√£o
///
/// ## Uso:
///
/// ```dart
/// // Logs b√°sicos
/// AppLogger.i('Aplica√ß√£o iniciada');
/// AppLogger.d('Debug info');
/// AppLogger.w('Aviso importante');
/// AppLogger.e('Erro cr√≠tico');
/// AppLogger.v('Informa√ß√£o detalhada');
///
/// // Com tags para categoriza√ß√£o
/// AppLogger.i('Usu√°rio logado', tag: 'Auth');
/// AppLogger.e('Falha na API', tag: 'Network', error: exception);
///
/// // Log detalhado com m√©todo principal
/// AppLogger.log(
///   'Opera√ß√£o complexa',
///   level: LogLevel.info,
///   tag: 'Business',
///   error: error,
///   stackTrace: stackTrace,
/// );
/// ```
///
/// ## Localiza√ß√£o dos Logs:
///
/// - **Console**: Sa√≠da colorida durante desenvolvimento
/// - **Arquivo**: `{DocumentsDirectory}/app.log`
/// - **Formato**: `[TIMESTAMP] [LEVEL] [TAG] MESSAGE`
///
/// ## Depend√™ncias:
/// - `flutter/foundation`: Para `kDebugMode` e `debugPrint`
/// - `path_provider`: Para acesso ao diret√≥rio de documentos
/// - `dart:io`: Para opera√ß√µes de arquivo
enum LogLevel {
  /// Logs muito detalhados para debugging profundo
  verbose,

  /// Logs de debugging para desenvolvimento
  debug,

  /// Informa√ß√µes gerais sobre o funcionamento
  info,

  /// Avisos sobre situa√ß√µes potencialmente problem√°ticas
  warning,

  /// Erros que afetam o funcionamento da aplica√ß√£o
  error
}

// ============================================================================
// C√ìDIGOS DE CORES ANSI PARA TERMINAL
// ============================================================================

/// C√≥digo ANSI para resetar cores no terminal
const _reset = '\x1B[0m';

/// C√≥digo ANSI para cor vermelha (usado em logs de erro)
const _red = '\x1B[31m';

/// C√≥digo ANSI para cor amarela (usado em logs de warning)
const _yellow = '\x1B[33m';

/// C√≥digo ANSI para cor verde (usado em logs de informa√ß√£o)
const _green = '\x1B[32m';

/// C√≥digo ANSI para cor azul (usado em logs de debug)
const _blue = '\x1B[34m';

/// C√≥digo ANSI para cor magenta (usado em stack traces)
const _magenta = '\x1B[35m';

/// C√≥digo ANSI para cor cinza (usado em logs verbose)
const _cinza = '\x1B[90m';

/// Classe principal do sistema de logging da aplica√ß√£o.
///
/// Esta classe fornece m√©todos est√°ticos para logging em diferentes n√≠veis,
/// com formata√ß√£o padronizada, cores no terminal e persist√™ncia em arquivo.
/// Todos os m√©todos s√£o otimizados para performance e s√≥ executam em modo debug.
class AppLogger {
  // ============================================================================
  // M√âTODO PRINCIPAL DE LOGGING
  // ============================================================================

  /// M√©todo principal para logging com controle completo de par√¢metros.
  ///
  /// Este m√©todo oferece a interface mais completa para logging, permitindo
  /// especificar n√≠vel, tag, erros e stack traces. √â usado internamente pelos
  /// m√©todos de conveni√™ncia e pode ser usado diretamente para casos complexos.
  ///
  /// ## Par√¢metros:
  /// - `message`: Mensagem principal a ser logada
  /// - `level`: N√≠vel do log (padr√£o: LogLevel.info)
  /// - `tag`: Tag para categoriza√ß√£o (padr√£o: 'APP')
  /// - `error`: Exce√ß√£o ou erro opcional
  /// - `stackTrace`: Stack trace opcional
  ///
  /// ## Comportamento:
  /// - N√£o executa em modo release (kDebugMode)
  /// - Exibe emoji correspondente ao n√≠vel
  /// - Formata mensagem com tag e timestamp
  /// - Inclui informa√ß√µes de erro e stack trace se fornecidas
  ///
  /// ## Exemplo:
  /// ```dart
  /// AppLogger.log(
  ///   'Falha na opera√ß√£o cr√≠tica',
  ///   level: LogLevel.error,
  ///   tag: 'Database',
  ///   error: exception,
  ///   stackTrace: stackTrace,
  /// );
  /// ```
  static void log(
    String message, {
    LogLevel level = LogLevel.info,
    String tag = 'APP',
    dynamic error,
    StackTrace? stackTrace,
  }) {
    /// Verifica se est√° em modo debug antes de executar qualquer opera√ß√£o de log.
    /// Isso garante que logs n√£o sejam processados em builds de produ√ß√£o.
    if (!kDebugMode) return;

    // ========================================================================
    // MAPEAMENTO DE EMOJIS POR N√çVEL
    // ========================================================================

    /// Mapeia cada n√≠vel de log para um emoji correspondente,
    /// facilitando identifica√ß√£o visual r√°pida no console.
    final emoji = {
      LogLevel.verbose: 'üîç',
      LogLevel.debug: 'üêû',
      LogLevel.info: '‚ÑπÔ∏è',
      LogLevel.warning: '‚ö†Ô∏è',
      LogLevel.error: '‚ùå',
    }[level];

    // ========================================================================
    // CONSTRU√á√ÉO DA MENSAGEM FORMATADA
    // ========================================================================

    /// Constr√≥i a mensagem formatada com emoji, tag e conte√∫do principal.
    final buffer = StringBuffer();
    buffer.writeln('$emoji [$tag] $message');

    /// Adiciona informa√ß√µes de erro se fornecidas.
    if (error != null) buffer.writeln('   ‚Ü≥ Error: $error');

    /// Adiciona stack trace se fornecido.
    if (stackTrace != null) buffer.writeln('   ‚Ü≥ Stack: $stackTrace');

    /// Exibe a mensagem formatada no console.
    debugPrint(buffer.toString());
  }

  // ============================================================================
  // M√âTODOS DE CONVENI√äNCIA POR N√çVEL
  // ============================================================================

  /// Log de informa√ß√£o (INFO) - cor verde.
  ///
  /// Usado para registrar informa√ß√µes gerais sobre o funcionamento da aplica√ß√£o,
  /// como inicializa√ß√£o, opera√ß√µes bem-sucedidas e eventos importantes.
  ///
  /// ## Par√¢metros:
  /// - `msg`: Mensagem a ser logada
  /// - `tag`: Tag opcional para categoriza√ß√£o
  ///
  /// ## Exemplo:
  /// ```dart
  /// AppLogger.i('Aplica√ß√£o iniciada com sucesso');
  /// AppLogger.i('Usu√°rio logado', tag: 'Auth');
  /// ```
  static void i(dynamic msg, {String? tag}) => _log(msg, 'INFO', _green, tag);

  /// Log de debug (DEBUG) - cor azul.
  ///
  /// Usado para informa√ß√µes de debugging durante o desenvolvimento,
  /// como valores de vari√°veis, fluxo de execu√ß√£o e estados internos.
  ///
  /// ## Par√¢metros:
  /// - `msg`: Mensagem a ser logada
  /// - `tag`: Tag opcional para categoriza√ß√£o
  ///
  /// ## Exemplo:
  /// ```dart
  /// AppLogger.d('Valor da vari√°vel: $valor');
  /// AppLogger.d('Entrando na fun√ß√£o X', tag: 'Flow');
  /// ```
  static void d(dynamic msg, {String? tag}) => _log(msg, 'DEBUG', _blue, tag);

  /// Log de warning (WARN) - cor amarela.
  ///
  /// Usado para registrar avisos sobre situa√ß√µes que podem causar problemas,
  /// mas n√£o impedem o funcionamento da aplica√ß√£o.
  ///
  /// ## Par√¢metros:
  /// - `msg`: Mensagem a ser logada
  /// - `tag`: Tag opcional para categoriza√ß√£o
  ///
  /// ## Exemplo:
  /// ```dart
  /// AppLogger.w('API retornou dados em formato inesperado');
  /// AppLogger.w('Cache expirado, recarregando', tag: 'Cache');
  /// ```
  static void w(dynamic msg, {String? tag}) => _log(msg, 'WARN', _yellow, tag);

  /// Log de erro (ERROR) - cor vermelha.
  ///
  /// Usado para registrar erros que afetam o funcionamento da aplica√ß√£o.
  /// Pode incluir exce√ß√µes e stack traces para debugging detalhado.
  ///
  /// ## Par√¢metros:
  /// - `msg`: Mensagem a ser logada
  /// - `tag`: Tag opcional para categoriza√ß√£o
  /// - `error`: Exce√ß√£o ou erro opcional
  /// - `stackTrace`: Stack trace opcional
  ///
  /// ## Comportamento:
  /// - Loga a mensagem principal em vermelho
  /// - Se error for fornecido, loga o erro em vermelho
  /// - Se stackTrace for fornecido, loga em magenta
  ///
  /// ## Exemplo:
  /// ```dart
  /// AppLogger.e('Falha na conex√£o com API');
  /// AppLogger.e('Erro cr√≠tico', tag: 'Database', error: exception);
  /// ```
  static void e(dynamic msg,
      {String? tag, dynamic error, StackTrace? stackTrace}) {
    _log(msg, 'ERROR', _red, tag);
    if (error != null) _log(error.toString(), 'ERROR', _red, tag);
    if (stackTrace != null) _log(stackTrace.toString(), 'STACK', _magenta, tag);
  }

  /// Log verbose (VERBOSE) - cor cinza.
  ///
  /// Usado para informa√ß√µes muito detalhadas durante debugging profundo,
  /// como logs de rede, opera√ß√µes de baixo n√≠vel e informa√ß√µes t√©cnicas.
  ///
  /// ## Par√¢metros:
  /// - `msg`: Mensagem a ser logada
  /// - `tag`: Tag opcional para categoriza√ß√£o
  ///
  /// ## Exemplo:
  /// ```dart
  /// AppLogger.v('Headers da requisi√ß√£o: $headers');
  /// AppLogger.v('Ciclo de vida do widget', tag: 'Widget');
  /// ```
  static void v(dynamic msg, {String? tag}) =>
      _log(msg, 'VERBOSE', _cinza, tag);

  // ============================================================================
  // M√âTODOS PRIVADOS DE IMPLEMENTA√á√ÉO
  // ============================================================================

  /// M√©todo interno para processamento e formata√ß√£o de logs.
  ///
  /// Este m√©todo √© usado internamente pelos m√©todos de conveni√™ncia para
  /// processar logs com cores, timestamps e persist√™ncia em arquivo.
  /// √â ass√≠ncrono para n√£o bloquear a UI durante opera√ß√µes de I/O.
  ///
  /// ## Par√¢metros:
  /// - `msg`: Mensagem a ser logada
  /// - `level`: N√≠vel do log (INFO, DEBUG, etc.)
  /// - `color`: C√≥digo ANSI da cor para o terminal
  /// - `tag`: Tag opcional para categoriza√ß√£o
  ///
  /// ## Comportamento:
  /// - Gera timestamp ISO 8601
  /// - Formata mensagem com n√≠vel e tag
  /// - Exibe no terminal com cor
  /// - Persiste em arquivo de forma ass√≠ncrona
  static Future<void> _log(dynamic msg, String level, String color,
      [String? tag]) async {
    /// Gera timestamp no formato ISO 8601 para identifica√ß√£o temporal precisa.
    final now = DateTime.now().toIso8601String();

    /// Formata a mensagem com n√≠vel e tag opcional para consist√™ncia.
    final formatted = "[$level] ${tag != null ? '[$tag] ' : ''}$msg";

    // ========================================================================
    // EXIBI√á√ÉO NO TERMINAL COM COR
    // ========================================================================

    /// Exibe a mensagem no terminal com cor correspondente ao n√≠vel de log.
    /// O reset √© aplicado no final para n√£o afetar logs subsequentes.
    debugPrint('$color[$now] $formatted$_reset');

    // ========================================================================
    // PERSIST√äNCIA EM ARQUIVO
    // ========================================================================

    /// Salva a mensagem formatada no arquivo de log de forma ass√≠ncrona.
    await _writeToFile('[$now] $formatted');
  }

  /// Salva conte√∫do no arquivo de log da aplica√ß√£o.
  ///
  /// Este m√©todo persiste logs no arquivo `app.log` no diret√≥rio de documentos
  /// da aplica√ß√£o. Utiliza modo append para manter hist√≥rico completo e flush
  /// para garantir que dados sejam escritos imediatamente.
  ///
  /// ## Par√¢metros:
  /// - `content`: Conte√∫do a ser salvo no arquivo
  ///
  /// ## Comportamento:
  /// - Localiza o diret√≥rio de documentos da aplica√ß√£o
  /// - Cria/acessa o arquivo `app.log`
  /// - Adiciona conte√∫do em modo append
  /// - Falha silenciosamente em caso de erro
  ///
  /// ## Tratamento de Erros:
  /// - Captura todas as exce√ß√µes para evitar crashes
  /// - Falha silenciosa para n√£o impactar a aplica√ß√£o
  static Future<void> _writeToFile(String content) async {
    try {
      /// Obt√©m o diret√≥rio de documentos da aplica√ß√£o atrav√©s do path_provider.
      final dir = await getApplicationDocumentsDirectory();

      /// Cria refer√™ncia ao arquivo de log no diret√≥rio de documentos.
      final file = File('${dir.path}/app.log');

      /// Escreve o conte√∫do no arquivo em modo append com flush imediato.
      /// O modo append mant√©m o hist√≥rico completo de logs.
      await file.writeAsString('$content\n',
          mode: FileMode.append, flush: true);
    } catch (_) {
      /// Falha silenciosa para n√£o impactar o funcionamento da aplica√ß√£o.
      /// Logs s√£o importantes, mas n√£o cr√≠ticos para a opera√ß√£o.
    }
  }
}
