import 'dart:async';

import 'package:dio/dio.dart' as dio;
import 'package:get/get.dart' as g;
import 'package:nexa_app/core/core_app/session/session_manager.dart';
import 'package:nexa_app/core/constants/api_constants.dart';
import 'package:nexa_app/core/utils/logger/app_logger.dart';
import 'package:nexa_app/core/utils/app_version.dart';

/// Cliente HTTP centralizado para comunica√ß√£o com APIs externas.
///
/// Esta classe implementa um cliente HTTP robusto baseado no framework Dio,
/// fornecendo funcionalidades avan√ßadas de comunica√ß√£o de rede, incluindo
/// autentica√ß√£o autom√°tica, refresh de tokens, logging detalhado e tratamento
/// padronizado de erros para toda a aplica√ß√£o.
///
/// ## Funcionalidades Principais:
///
/// 1. **Configura√ß√£o Centralizada**: Base URL, timeouts e configura√ß√µes padr√£o
/// 2. **Autentica√ß√£o Autom√°tica**: Anexa√ß√£o autom√°tica de Bearer Token nas requisi√ß√µes
/// 3. **Refresh de Token**: Renova√ß√£o autom√°tica de tokens expirados (401)
/// 4. **Logging Detalhado**: Logs completos de requests/responses para debugging
/// 5. **Tratamento de Erros**: Tratamento padronizado de diferentes tipos de erro
/// 6. **Controle de Concorr√™ncia**: Preven√ß√£o de m√∫ltiplas tentativas simult√¢neas de refresh
/// 7. **Versionamento**: Anexa√ß√£o autom√°tica da vers√£o do app nos headers
///
/// ## Arquitetura:
///
/// - **Singleton Pattern**: Inst√¢ncia √∫nica para toda a aplica√ß√£o
/// - **Interceptor Pattern**: Intercepta√ß√£o de requests/responses via Dio
/// - **Completer Pattern**: Controle de opera√ß√µes ass√≠ncronas de refresh
/// - **Error Handling**: Tratamento centralizado de exce√ß√µes de rede
///
/// ## Fluxo de Autentica√ß√£o:
///
/// 1. Request √© interceptado e token √© anexado automaticamente
/// 2. Se token expirou (401), inicia processo de refresh
/// 3. Outras requisi√ß√µes aguardam o refresh em andamento
/// 4. Ap√≥s refresh bem-sucedido, requisi√ß√£o √© reexecutada
/// 5. Se refresh falha, usu√°rio √© redirecionado para login
///
/// ## Tratamento de Erros:
///
/// - **401 Unauthorized**: Refresh autom√°tico de token
/// - **Timeout**: Tempo de conex√£o esgotado
/// - **Connection Error**: Falha de conectividade
/// - **Server Error**: Erros do servidor (500, etc.)
/// - **SSL Error**: Problemas de certificado
///
/// ## Uso:
///
/// ```dart
/// final dioClient = DioClient();
///
/// // GET request
/// final response = await dioClient.get('/users');
///
/// // POST request
/// final response = await dioClient.post('/login', data: credentials);
/// ```
///
/// ## Depend√™ncias:
/// - `Dio`: Framework HTTP para Dart/Flutter
/// - `SessionManager`: Gerenciamento de sess√µes e tokens
/// - `AppLogger`: Sistema de logging centralizado
/// - `AppVersion`: Informa√ß√µes de vers√£o do aplicativo
/// - `ApiConstants`: Configura√ß√µes de API e constantes
class DioClient {
  // ============================================================================
  // CONFIGURA√á√ÉO E ESTADO DO CLIENTE HTTP
  // ============================================================================

  /// Inst√¢ncia do cliente HTTP Dio configurado com interceptors e op√ß√µes.
  ///
  /// Esta inst√¢ncia cont√©m toda a configura√ß√£o necess√°ria para comunica√ß√£o
  /// com APIs, incluindo base URL, timeouts e interceptors para autentica√ß√£o,
  /// logging e tratamento de erros.
  final dio.Dio _dio;

  /// Flag que indica se uma opera√ß√£o de refresh de token est√° em andamento.
  ///
  /// Esta flag previne m√∫ltiplas tentativas simult√¢neas de refresh de token,
  /// garantindo que apenas uma opera√ß√£o de renova√ß√£o seja executada por vez.
  /// Outras requisi√ß√µes que recebem 401 aguardam a conclus√£o desta opera√ß√£o.
  bool _isRefreshing = false;

  /// Completer usado para sincronizar m√∫ltiplas requisi√ß√µes durante refresh de token.
  ///
  /// Quando uma requisi√ß√£o inicia o processo de refresh, outras requisi√ß√µes
  /// que recebem 401 aguardam a conclus√£o atrav√©s deste completer, evitando
  /// m√∫ltiplas tentativas desnecess√°rias de renova√ß√£o de token.
  Completer<void>? _refreshCompleter;

  /// Construtor do DioClient que inicializa o cliente HTTP com configura√ß√µes padr√£o.
  ///
  /// Este construtor configura o cliente Dio com:
  /// - Base URL obtida de `ApiConstants`
  /// - Timeouts de conex√£o e recebimento de 10 segundos
  /// - Interceptors para autentica√ß√£o, logging e tratamento de erros
  ///
  /// ## Configura√ß√µes Aplicadas:
  /// - **Base URL**: Configurada atrav√©s de `ApiConstants.baseUrl`
  /// - **Connect Timeout**: 10 segundos para estabelecer conex√£o
  /// - **Receive Timeout**: 10 segundos para receber resposta
  /// - **Interceptors**: Autentica√ß√£o, logging e tratamento de erros
  DioClient()
      : _dio = dio.Dio(
          dio.BaseOptions(
            baseUrl: ApiConstants.baseUrl,
            connectTimeout: const Duration(seconds: 10),
            receiveTimeout: const Duration(seconds: 10),
          ),
        ) {
    // ============================================================================
    // CONFIGURA√á√ÉO DOS INTERCEPTORS DO DIO
    // ============================================================================

    /// Adiciona o interceptor principal que gerencia autentica√ß√£o, logging
    /// e tratamento de erros para todas as requisi√ß√µes HTTP.
    _dio.interceptors.add(
      dio.InterceptorsWrapper(
        // ========================================================================
        // INTERCEPTOR DE REQUESTS (ANTES DO ENVIO)
        // ========================================================================

        /// Interceptor executado antes de cada requisi√ß√£o ser enviada.
        /// Respons√°vel por anexar headers de autentica√ß√£o, versionamento
        /// e logging detalhado das requisi√ß√µes.
        onRequest: (options, handler) {
          // ====================================================================
          // CONFIGURA√á√ÉO DE AUTENTICA√á√ÉO
          // ====================================================================

          /// Obt√©m o gerenciador de sess√£o atrav√©s do sistema de inje√ß√£o
          /// de depend√™ncias do GetX para acessar o token de autentica√ß√£o.
          final sessionManager = g.Get.find<SessionManager>();

          /// Recupera o token de autentica√ß√£o de forma s√≠ncrona.
          /// O token √© obtido do SessionManager que gerencia toda a sess√£o do usu√°rio.
          final token = sessionManager.tokenSync;

          /// Anexa o token Bearer ao header Authorization se dispon√≠vel.
          /// Isso garante que todas as requisi√ß√µes incluam automaticamente
          /// as credenciais de autentica√ß√£o necess√°rias.
          if (token != null && token.isNotEmpty) {
            options.headers['Authorization'] = 'Bearer $token';
            AppLogger.d('üîê Token adicionado ao header');
          }

          // ====================================================================
          // CONFIGURA√á√ÉO DE HEADERS PADR√ÉO
          // ====================================================================

          /// Define o Content-Type padr√£o para todas as requisi√ß√µes.
          /// Isso garante que o servidor entenda que estamos enviando JSON.
          options.headers['Content-Type'] = 'application/json';

          /// Anexa a vers√£o completa do aplicativo ao header.
          /// Isso permite que o servidor identifique a vers√£o do cliente
          /// para compatibilidade, logging e analytics.
          options.headers['App-Version'] = AppVersion.fullVersion;

          /// Registra a adi√ß√£o da vers√£o do app para debugging.
          AppLogger.d('üì± Vers√£o do app adicionada: ${AppVersion.fullVersion}');

          // ====================================================================
          // LOGGING DETALHADO DA REQUISI√á√ÉO
          // ====================================================================

          /// Inicia o logging detalhado da requisi√ß√£o para debugging e monitoramento.
          /// Os logs incluem m√©todo, URL, headers e body da requisi√ß√£o.
          AppLogger.v('‚û°Ô∏è [API REQUEST]');
          AppLogger.v('üîπ Method: ${options.method}');
          AppLogger.v('üîπ URL: ${options.uri}');

          /// Cria uma c√≥pia segura dos headers para logging, mascarando o token
          /// de autentica√ß√£o para evitar exposi√ß√£o de credenciais em logs.
          final headersSafe = Map.of(options.headers);
          if (headersSafe.containsKey('Authorization')) {
            headersSafe['Authorization'] = 'Bearer ***';
          }
          AppLogger.v('üîπ Headers: $headersSafe');
          AppLogger.v('üîπ Body: ${options.data}');

          /// Prossegue com a requisi√ß√£o ap√≥s configura√ß√£o completa.
          handler.next(options);
        },
        // ========================================================================
        // INTERCEPTOR DE RESPONSES (AP√ìS RECEBIMENTO)
        // ========================================================================

        /// Interceptor executado ap√≥s receber uma resposta bem-sucedida do servidor.
        /// Respons√°vel por logging detalhado das respostas para debugging e monitoramento.
        onResponse: (response, handler) {
          /// Registra o recebimento de uma resposta bem-sucedida.
          /// Os logs incluem status code, URL e dados da resposta para
          /// facilitar debugging e monitoramento de APIs.
          AppLogger.i('‚úÖ [API RESPONSE]');
          AppLogger.v('üî∏ Status: ${response.statusCode}');
          AppLogger.v('üî∏ URL: ${response.requestOptions.uri}');
          AppLogger.v('üî∏ Data: ${response.data}');

          /// Prossegue com o processamento da resposta.
          handler.next(response);
        },
        // ========================================================================
        // INTERCEPTOR DE ERROS (TRATAMENTO DE FALHAS)
        // ========================================================================

        /// Interceptor executado quando uma requisi√ß√£o falha ou retorna erro.
        /// Respons√°vel pelo tratamento centralizado de erros, incluindo refresh
        /// autom√°tico de tokens, tratamento de diferentes tipos de erro e logging detalhado.
        onError: (error, handler) async {
          // ====================================================================
          // EXTRA√á√ÉO DE INFORMA√á√ïES DO ERRO
          // ====================================================================

          /// Extrai informa√ß√µes essenciais do erro para tratamento e logging.
          final status = error.response?.statusCode ?? 0;
          final uri = error.requestOptions.uri;
          final tipo = error.type;
          final options = error.requestOptions;
          final session = g.Get.find<SessionManager>();

          /// Recupera o n√∫mero de tentativas de refresh j√° realizadas para esta requisi√ß√£o.
          /// Isso previne loops infinitos de tentativas de renova√ß√£o de token.
          final int retryCount = (options.extra['refreshAttempts'] ?? 0) as int;

          // ====================================================================
          // TRATAMENTO DE ERRO 401 (UNAUTHORIZED)
          // ====================================================================

          /// Trata erros de autentica√ß√£o (401) com refresh autom√°tico de token.
          /// Este √© o fluxo mais complexo, envolvendo renova√ß√£o de token e retry da requisi√ß√£o.
          if (status == 401) {
            /// Verifica se j√° excedeu o n√∫mero m√°ximo de tentativas de refresh.
            /// Isso previne loops infinitos e for√ßa logout ap√≥s falhas repetidas.
            if (retryCount >= ApiConstants.maxRefreshAttempts) {
              AppLogger.e(
                  '‚ùå M√°ximo de tentativas de refresh atingido para $uri');
              await session.logout();
              await g.Get.offAllNamed('/login');
              return handler.next(error);
            }

            /// Verifica se h√° um usu√°rio logado e refresh token dispon√≠vel antes de tentar renovar.
            final refreshToken = session.usuario?.refreshToken;
            if (refreshToken == null || refreshToken.isEmpty) {
              /// Se n√£o h√° refresh token, deixa o erro 401 passar para ser tratado pelo controller.
              /// Isso permite que erros de login (credenciais inv√°lidas) sejam exibidos corretamente.
              AppLogger.w(
                  'üö´ Refresh token ausente. Deixando erro 401 passar para tratamento.');
              return handler.next(error);
            }

            /// Se j√° existe um refresh em andamento, aguarda sua conclus√£o
            /// para evitar m√∫ltiplas tentativas simult√¢neas de renova√ß√£o.
            if (_isRefreshing) {
              AppLogger.d('üîÑ Aguardando outra renova√ß√£o de token');
              try {
                /// Aguarda a conclus√£o do refresh em andamento com timeout de 5 segundos.
                await _refreshCompleter?.future
                    .timeout(const Duration(seconds: 5));

                /// Ap√≥s o refresh, tenta usar o novo token para reexecutar a requisi√ß√£o.
                final newToken = session.tokenSync;
                if (newToken != null && newToken.isNotEmpty) {
                  options.headers['Authorization'] = 'Bearer $newToken';
                  options.extra['refreshAttempts'] = retryCount + 1;
                  final retryResponse = await _dio.fetch(options);
                  return handler.resolve(retryResponse);
                }
              } catch (_) {
                /// Se o timeout ou outro erro ocorrer, prossegue com o erro original.
                return handler.next(error);
              }
            }

            /// Inicia o processo de refresh de token.
            AppLogger.w(
                'üîÅ Tentando renovar token... (tentativa ${retryCount + 1})');
            _isRefreshing = true;
            _refreshCompleter = Completer();

            try {
              /// Executa a renova√ß√£o do token atrav√©s do servi√ßo de autentica√ß√£o.
              await session.authService
                  .refreshToken(refreshToken)
                  .timeout(const Duration(seconds: 5));

              /// Marca o refresh como conclu√≠do e libera outras requisi√ß√µes aguardando.
              _refreshCompleter?.complete();
              _isRefreshing = false;

              /// Ap√≥s refresh bem-sucedido, reexecuta a requisi√ß√£o original com o novo token.
              final newToken = session.tokenSync;
              if (newToken != null && newToken.isNotEmpty) {
                options.headers['Authorization'] = 'Bearer $newToken';
                options.extra['refreshAttempts'] = retryCount + 1;
                AppLogger.d('üîÅ Retentando requisi√ß√£o ap√≥s refresh');
                final retryResponse = await _dio.fetch(options);
                return handler.resolve(retryResponse);
              }
            } catch (e, s) {
              /// Em caso de falha no refresh, limpa o estado e for√ßa logout.
              if (!(_refreshCompleter?.isCompleted ?? true)) {
                _refreshCompleter?.completeError(e, s);
              }
              _isRefreshing = false;

              AppLogger.e('üö´ Falha ao renovar token. For√ßando logout.',
                  error: e, stackTrace: s);
              await session.logout();
              await g.Get.offAllNamed('/login');
            }

            /// Se chegou at√© aqui, prossegue com o erro original.
            return handler.next(error);
          }

          // ====================================================================
          // TRATAMENTO GEN√âRICO DE ERROS DE REDE
          // ====================================================================

          /// Trata diferentes tipos de erro de rede com mensagens padronizadas.
          /// Isso garante que os usu√°rios recebam mensagens de erro claras e √∫teis.
          String mensagem;
          switch (tipo) {
            case dio.DioExceptionType.connectionTimeout:
            case dio.DioExceptionType.sendTimeout:
            case dio.DioExceptionType.receiveTimeout:
              mensagem = 'Tempo de conex√£o esgotado';
              break;
            case dio.DioExceptionType.connectionError:
              mensagem = 'Falha de conex√£o: verifique sua internet';
              break;
            case dio.DioExceptionType.badResponse:
              mensagem = status == 500
                  ? 'Erro interno no servidor (500)'
                  : 'Erro do servidor: status $status';
              break;
            case dio.DioExceptionType.cancel:
              mensagem = 'Requisi√ß√£o cancelada';
              break;
            case dio.DioExceptionType.unknown:
              mensagem = 'Erro desconhecido de rede';
              break;
            case dio.DioExceptionType.badCertificate:
              mensagem = 'Certificado SSL inv√°lido';
              break;
          }

          // ====================================================================
          // LOGGING DETALHADO DO ERRO
          // ====================================================================

          /// Registra informa√ß√µes detalhadas do erro para debugging e monitoramento.
          /// Os logs incluem status, URL, tipo de erro e dados da resposta.
          AppLogger.e('‚ùå [API ERROR]');
          AppLogger.e('üîª Status: $status');
          AppLogger.e('üîª URL: $uri');
          AppLogger.e('üîª Tipo: $tipo');
          AppLogger.e('üîª Mensagem tratada: $mensagem');
          AppLogger.v('üîª Body: ${error.response?.data}');

          /// Rejeita o erro com informa√ß√µes tratadas e padronizadas.
          return handler.reject(
            dio.DioException(
              requestOptions: options,
              error: mensagem,
              type: tipo,
              response: error.response,
            ),
          );
        },
      ),
    );
  }

  // ============================================================================
  // M√âTODOS HTTP P√öBLICOS
  // ============================================================================

  /// Executa uma requisi√ß√£o HTTP GET.
  ///
  /// ## Par√¢metros:
  /// - `path`: Caminho relativo da API (ser√° concatenado com baseUrl)
  /// - `queryParameters`: Par√¢metros de query opcionais
  ///
  /// ## Retorno:
  /// - `Future<dio.Response>`: Resposta da requisi√ß√£o
  ///
  /// ## Exemplo:
  /// ```dart
  /// final response = await dioClient.get('/users', queryParameters: {'page': 1});
  /// ```
  Future<dio.Response> get(String path,
      {Map<String, dynamic>? queryParameters}) {
    return _dio.get(path, queryParameters: queryParameters);
  }

  /// Executa uma requisi√ß√£o HTTP POST.
  ///
  /// ## Par√¢metros:
  /// - `path`: Caminho relativo da API (ser√° concatenado com baseUrl)
  /// - `data`: Dados a serem enviados no body da requisi√ß√£o
  ///
  /// ## Retorno:
  /// - `Future<dio.Response>`: Resposta da requisi√ß√£o
  ///
  /// ## Exemplo:
  /// ```dart
  /// final response = await dioClient.post('/login', data: {'email': 'user@example.com'});
  /// ```
  Future<dio.Response> post(String path, {dynamic data}) {
    return _dio.post(path, data: data);
  }

  /// Executa uma requisi√ß√£o HTTP PUT.
  ///
  /// ## Par√¢metros:
  /// - `path`: Caminho relativo da API (ser√° concatenado com baseUrl)
  /// - `data`: Dados a serem enviados no body da requisi√ß√£o
  ///
  /// ## Retorno:
  /// - `Future<dio.Response>`: Resposta da requisi√ß√£o
  ///
  /// ## Exemplo:
  /// ```dart
  /// final response = await dioClient.put('/users/123', data: {'name': 'John'});
  /// ```
  Future<dio.Response> put(String path, {dynamic data}) {
    return _dio.put(path, data: data);
  }

  /// Executa uma requisi√ß√£o HTTP DELETE.
  ///
  /// ## Par√¢metros:
  /// - `path`: Caminho relativo da API (ser√° concatenado com baseUrl)
  ///
  /// ## Retorno:
  /// - `Future<dio.Response>`: Resposta da requisi√ß√£o
  ///
  /// ## Exemplo:
  /// ```dart
  /// final response = await dioClient.delete('/users/123');
  /// ```
  Future<dio.Response> delete(String path) {
    return _dio.delete(path);
  }

  // ============================================================================
  // ACESSO AO CLIENTE DIO
  // ============================================================================

  /// Retorna a inst√¢ncia do cliente Dio para acesso direto.
  ///
  /// Este getter permite acesso direto ao cliente Dio subjacente para casos
  /// onde funcionalidades espec√≠ficas do Dio s√£o necess√°rias que n√£o est√£o
  /// expostas pelos m√©todos p√∫blicos desta classe.
  ///
  /// ## Uso:
  /// ```dart
  /// final dio = dioClient.client;
  /// final response = await dio.patch('/path', data: data);
  /// ```
  dio.Dio get client => _dio;
}
